# Produktanforderungsdokument (PRD) - Preiskalkulator Tool
## API-First Ansatz mit modernem Tech Stack

---

## 1. Einführung

Dieses Produktanforderungsdokument beschreibt die Entwicklung eines API-first Preiskalkulator-Tools mit Fokus auf eine skalierbare, moderne Architektur. Die Entwicklung erfolgt in klar definierten Phasen, wobei die Backend-API als Fundament für alle zukünftigen Client-Anwendungen dient.

### 1.1 Entwicklungsphasen
- **Phase 1**: Backend-API Entwicklung (Priorität)
- **Phase 2**: Mobile-First Web Frontend
- **Phase 3**: Native Mobile Anwendungen (iOS/Android)
- **Phase 4**: Desktop-Anwendung mit Tauri

### 1.2 Dokumentzweck
Dieses PRD dient als zentrale Referenz für alle Projektbeteiligten und definiert funktionale sowie technische Anforderungen für die API-zentrierte Entwicklung des Preiskalkulator-Tools.

---

## 2. Produktübersicht

### 2.1 Vision
Ein modulares, API-basiertes Preiskalkulations-System zu schaffen, das über eine zentrale, gut dokumentierte API verschiedene Client-Anwendungen bedient und dabei maximale Flexibilität, Skalierbarkeit und Wartbarkeit bietet.

### 2.2 Produktbeschreibung
Das Preiskalkulator-Tool ist eine API-zentrierte Lösung für die automatisierte Preisgestaltung und Angebotserstellung. Das System besteht aus einer robusten Backend-API, die verschiedene Frontend-Clients bedient, beginnend mit einer Mobile-First Progressive Web App.

### 2.3 Zentrale Wertversprechen
- **API-First Architektur**: Einheitliche, versionierte API für alle Clients
- **Skalierbarkeit**: Serverless-Architektur mit Edge-Computing-Fähigkeiten
- **Mobile-First Design**: Primärer Fokus auf mobile Nutzererfahrung
- **Type-Safety**: Durchgängige Typsicherheit im gesamten Stack
- **Performance**: Edge-optimierte Architektur für minimale Latenz
- **Zukunftssicherheit**: Flexibel erweiterbar für neue Plattformen

### 2.4 Flexible Nutzungsszenarien

#### Live-Kundengespräch Integration
Das System unterstützt die spontane Nutzung während aktiver Kundengespräche mit folgenden Fähigkeiten:
- Echtzeit-Preiskalkulationen während des Gesprächs
- Interaktive Service-Konfiguration gemeinsam mit dem Kunden
- Sofortige Rabattgewährung und Preisanpassungen
- Direkte PDF-Generierung für verbindliche Angebote
- Offline-Fähigkeit für Vor-Ort-Termine ohne Internetverbindung

#### Multi-Platform Konsistenz
- Identische Funktionalität über alle Plattformen
- Nahtlose Datensynchronisation zwischen Geräten
- Konsistente Benutzererfahrung unabhängig vom Endgerät

---

## 3. Ziele und Zielsetzungen

### 3.1 Geschäftsziele
- **Digitale Transformation**: Vollständige Digitalisierung des Preisgestaltungsprozesses
- **Effizienzsteigerung**: 70% Reduktion der Angebotserstellungszeit
- **Fehlerminimierung**: 95% weniger manuelle Preisfehler
- **Kundenzufriedenheit**: Sofortige Angebotserstellung während Kundengesprächen
- **Skalierbarkeit**: Unterstützung für unbegrenztes Wachstum

### 3.2 Technische Ziele
- **API-Performance**: Antwortzeiten unter 100ms (p95)
- **Verfügbarkeit**: 99.9% Uptime für die API
- **Mobile Performance**: Lighthouse Score über 90
- **Offline-Fähigkeit**: Vollständige Funktionalität ohne Internetverbindung
- **Sicherheit**: Implementierung moderner Sicherheitsstandards

### 3.3 Benutzerziele
- **Intuitive Bedienung**: Minimale Einarbeitungszeit
- **Schnelle Angebotserstellung**: Unter 5 Minuten pro Angebot
- **Flexibilität**: Anpassung an verschiedene Verkaufsszenarien
- **Transparenz**: Nachvollziehbare Preisberechnungen
- **Mobilität**: Arbeiten von überall aus möglich

---

## 4. Zielgruppe

### 4.1 Primäre Benutzer

#### Vertriebsmitarbeiter
- **Rolle**: Direkte Angebotserstellung und Kundenkontakt
- **Bedürfnisse**: Schnelle, mobile Preiskalkulation, Offline-Fähigkeit
- **Technische Kompetenz**: Grundlegend bis fortgeschritten
- **Nutzungskontext**: Büro, Außendienst, Kundentermine

#### Vertriebsleiter
- **Rolle**: Team-Überwachung und strategische Preisgestaltung
- **Bedürfnisse**: Analytics, Teamperformance, Preisgenehmigungen
- **Technische Kompetenz**: Fortgeschritten
- **Nutzungskontext**: Primär Büro, gelegentlich mobil

#### Systemadministratoren
- **Rolle**: Systemkonfiguration und Benutzerverwaltung
- **Bedürfnisse**: API-Verwaltung, Monitoring, Integrationen
- **Technische Kompetenz**: Sehr fortgeschritten
- **Nutzungskontext**: Ausschließlich Desktop

### 4.2 Sekundäre Benutzer

#### Geschäftsführung
- **Nutzung**: Strategische Reports und Dashboards
- **Fokus**: High-Level Metriken und Trends

#### Finanzabteilung
- **Nutzung**: Margenvalidierung und Finanzreports
- **Fokus**: Kostenkontrolle und Rentabilität

#### IT-Abteilung
- **Nutzung**: API-Integration und Systemwartung
- **Fokus**: Technische Integration und Sicherheit

---

## 5. Funktionale Anforderungen

### 5.1 Backend-API Funktionen (Phase 1 - Priorität)

#### 5.1.1 Service-Management
- Vollständige CRUD-Operationen für Service-Katalog
- Hierarchische Kategorieverwaltung (7 Hauptkategorien)
- Unterstützung multipler Preismodelle (Festpreis, Stundensatz, monatlich, projektbasiert)
- Service-Abhängigkeitsmanagement mit Validierung
- Komplexitätsstufen (Basic, Standard, Premium) mit konfigurierbaren Multiplikatoren
- Bulk-Import und Export-Funktionalität
- Versionierung von Service-Änderungen

#### 5.1.2 Preisberechnungs-Engine
- Echtzeit-Preisberechnung mit komplexer Geschäftslogik
- Automatische Abhängigkeitsprüfung und -auflösung
- Flexible Rabattsysteme (prozentual, absolut, gestaffelt)
- Bundle-Erkennung und automatische Rabattierung
- Kundenspezifische Preisregeln
- Zeitschätzung für projektbasierte Services
- Gewinnmargenberechnung und -validierung

#### 5.1.3 Angebotsverwaltung
- Angebotserstellung mit vollständigen Projektdetails
- Template-System für verschiedene Angebotstypen
- PDF-Generierung mit Corporate Branding
- Versionsverwaltung für Angebotsänderungen
- Gültigkeitszeiträume und automatische Ablaufverwaltung
- Angebotsduplizierung und -anpassung
- Multi-Währungsunterstützung

#### 5.1.4 Kundenverwaltung
- Umfassende Kundendatenbank mit Kontaktinformationen
- Kundenhistorie und Interaktionsverlauf
- Individuelle Preisvereinbarungen pro Kunde
- Kundensegmentierung (Privat, KMU, Enterprise)
- Automatische Dublettenerkennung
- Kundenspezifische Rabattregeln
- Integration mit CRM-Systemen

#### 5.1.5 Authentifizierung und Autorisierung
- Sichere Benutzerauthentifizierung mit modernen Standards
- Rollenbasierte Zugriffskontrolle (RBAC)
- Session-Management mit automatischer Erneuerung
- Passwort-Reset und Account-Recovery
- Multi-Faktor-Authentifizierung (optional)
- API-Key Management für externe Integrationen
- Audit-Logging aller sicherheitsrelevanten Aktionen

### 5.2 Frontend-Funktionen (Phase 2 - Mobile-First PWA)

#### 5.2.1 Progressive Web App Capabilities
- Installierbarkeit als eigenständige App
- Offline-Funktionalität mit Service Worker
- Push-Benachrichtigungen für wichtige Updates
- Hintergrund-Synchronisation
- App-ähnliche Navigation und Übergänge
- Zugriff auf Gerätefunktionen (Kamera, GPS)

#### 5.2.2 Benutzeroberfläche
- Mobile-optimiertes, responsives Design
- Touch-optimierte Interaktionselemente
- Intuitive Gestensteuerung
- Schnellzugriff auf häufig genutzte Funktionen
- Kontextsensitive Hilfe und Tooltips
- Barrierefreies Design nach WCAG 2.1 AA

#### 5.2.3 Offline-Funktionalität
- Lokale Datenspeicherung mit IndexedDB
- Offline-Angebotserstellung
- Automatische Synchronisation bei Verbindung
- Konfliktauflösung bei konkurrierenden Änderungen
- Visueller Offline-Indikator
- Queue-Management für ausstehende Aktionen

---

## 6. Nicht-funktionale Anforderungen

### 6.1 Performance
- **API-Antwortzeit**: < 100ms für 95% aller Anfragen
- **Seitenladzeit**: < 3 Sekunden auf 3G-Verbindungen
- **Time to Interactive**: < 5 Sekunden
- **Gleichzeitige Benutzer**: Mindestens 1000
- **Datenbankabfragen**: Optimiert für < 50ms

### 6.2 Skalierbarkeit
- **Horizontale Skalierung**: Automatisch basierend auf Last
- **Datenbank-Skalierung**: Unterstützung für Read-Replicas
- **CDN-Integration**: Für statische Assets
- **Edge-Computing**: Nähe zu Benutzern weltweit
- **Caching-Strategien**: Multi-Level-Caching

### 6.3 Sicherheit
- **Verschlüsselung**: TLS 1.3 für alle Verbindungen
- **Datenverschlüsselung**: At-rest und in-transit
- **OWASP-Konformität**: Top 10 Sicherheitsmaßnahmen
- **Penetrationstests**: Quartalsweise
- **Compliance**: DSGVO/GDPR-konform

### 6.4 Verfügbarkeit
- **Uptime-Ziel**: 99.9% (8.76 Stunden Downtime/Jahr)
- **Disaster Recovery**: RTO < 4 Stunden, RPO < 1 Stunde
- **Backup-Strategie**: Tägliche automatische Backups
- **Monitoring**: 24/7 mit automatischen Alerts
- **Failover**: Automatisch bei Ausfall

### 6.5 Wartbarkeit
- **Code-Dokumentation**: Inline und externe Dokumentation
- **API-Dokumentation**: Automatisch generiert und versioniert
- **Logging**: Strukturiertes, zentralisiertes Logging
- **Monitoring**: Application Performance Monitoring
- **Update-Strategie**: Zero-Downtime Deployments

---

## 7. Technische Architektur

### 7.1 System-Architektur

#### API-First Prinzipien
- Alle Geschäftslogik in der API gekapselt
- Strikte Trennung von Frontend und Backend
- Versionierte, rückwärtskompatible APIs
- Umfassende API-Dokumentation
- Standardisierte Fehlerbehandlung

#### Microservices-Ansatz
- Modulare Service-Architektur
- Unabhängige Skalierung einzelner Services
- Event-Driven Communication wo sinnvoll
- Service Mesh für Kommunikation
- Container-basiertes Deployment

### 7.2 Technology Stack

#### Backend-Stack (Phase 1)
- **Runtime**: Node.js 20+ oder Bun
- **API Framework**: Hono.js (Edge-optimiert)
- **Datenbank**: Neon DB (Serverless PostgreSQL)
- **ORM**: Drizzle ORM
- **Validierung**: Zod Schema Validation
- **API-Protokolle**: REST + tRPC
- **Dokumentation**: OpenAPI 3.0 / Scalar
- **Testing**: Vitest + Playwright
- **Deployment**: Vercel Edge / Cloudflare Workers

#### Frontend-Stack (Phase 2)
- **Framework**: Next.js 14+ (App Router)
- **UI-Komponenten**: shadcn/ui
- **Styling**: Tailwind CSS v4
- **State Management**: Zustand + TanStack Query
- **Formulare**: React Hook Form + Zod
- **PWA**: Workbox / next-pwa
- **Testing**: Vitest + Playwright

#### Infrastructure
- **Hosting**: Edge-basiert (Vercel/Cloudflare)
- **CDN**: Integriert in Hosting
- **Monitoring**: Sentry + Vercel Analytics
- **CI/CD**: GitHub Actions
- **Container**: Docker für lokale Entwicklung

### 7.3 Datenmodell

#### Haupt-Entitäten
- **Users**: Benutzerkonten mit Rollen und Berechtigungen
- **Services**: Service-Katalog mit Preisen und Abhängigkeiten
- **Customers**: Kundendaten und individuelle Vereinbarungen
- **Quotations**: Angebote mit Positionen und Kalkulationen
- **Categories**: Hierarchische Service-Kategorien
- **PricingRules**: Flexible Preisregeln und Rabatte
- **AuditLogs**: Nachvollziehbarkeit aller Änderungen

#### Datenbank-Design-Prinzipien
- Normalisierung bis zur 3. Normalform
- Optimierte Indizierung für häufige Abfragen
- Soft-Deletes für Datenintegrität
- UUID als Primary Keys
- Timestamp-Felder für alle Entitäten

### 7.4 API-Design

#### RESTful Endpunkte
- Ressourcen-orientiertes Design
- Konsistente URL-Struktur
- Proper HTTP-Verben und Status-Codes
- Pagination, Filtering, Sorting
- HATEOAS wo anwendbar

#### API-Versionierung
- URL-basierte Versionierung (/v1, /v2)
- Rückwärtskompatibilität für 2 Versionen
- Deprecation-Warnings in Headers
- Migrations-Guides für Breaking Changes

#### Fehlerbehandlung
- Standardisierte Fehlerformate
- Aussagekräftige Fehlermeldungen
- Fehler-Codes für Automatisierung
- Stack-Traces nur in Development

---

## 8. Entwicklungs-Roadmap

### Phase 1: Backend-API (6-8 Wochen)
**Woche 1-2: Foundation**
- Projekt-Setup und Infrastruktur
- Datenbank-Schema und Migrationen
- Basis-API-Struktur mit Hono.js
- CI/CD Pipeline

**Woche 3-4: Core Features**
- Service-Management API
- Preisberechnungs-Engine
- Basis-Authentifizierung

**Woche 5-6: Advanced Features**
- Angebotsverwaltung
- Kundenverwaltung
- PDF-Generierung

**Woche 7-8: Polish & Testing**
- API-Dokumentation
- Performance-Optimierung
- Sicherheitstests
- Load Testing

### Phase 2: Mobile-First Frontend (8-10 Wochen)
**Woche 1-2: Setup & Foundation**
- Next.js Projekt-Setup
- UI-Komponenten-Library
- PWA-Konfiguration
- API-Integration

**Woche 3-5: Core Features**
- Service-Auswahl UI
- Preiskalkulation Interface
- Kundenverwaltung

**Woche 6-7: Offline Capabilities**
- Service Worker Implementation
- Offline-Datenspeicherung
- Sync-Mechanismen

**Woche 8-10: Polish & Launch**
- Performance-Optimierung
- User Testing
- Bug Fixes
- Deployment

### Phase 3: Native Apps (12-16 Wochen)
- Parallele Entwicklung für iOS und Android
- Nutzung der bestehenden REST API
- Native Features und Optimierungen

### Phase 4: Desktop App (4-6 Wochen)
- Tauri-Integration
- Desktop-spezifische Features
- System-Integrationen

---

## 9. Erfolgsmetriken

### 9.1 Technische Metriken
- **API-Verfügbarkeit**: > 99.9%
- **Response Time**: p95 < 100ms
- **Error Rate**: < 0.1%
- **Test Coverage**: > 80%
- **Lighthouse Score**: > 90

### 9.2 Business Metriken
- **Angebotserstellungszeit**: < 5 Minuten
- **Benutzerakzeptanz**: > 90%
- **Fehlerrate**: < 1%
- **Mobile Nutzung**: > 40%
- **Offline-Nutzung**: > 20%

### 9.3 Benutzer-Metriken
- **Time to First Quote**: < 24 Stunden nach Onboarding
- **Daily Active Users**: > 80% der Vertriebsteams
- **Feature Adoption**: > 70% für Kernfeatures
- **User Satisfaction**: NPS > 50

---

## 10. Risiken und Mitigationsstrategien

### 10.1 Technische Risiken
**Risiko**: Performance-Probleme bei Skalierung
- **Mitigation**: Load Testing, Caching-Strategien, CDN

**Risiko**: Offline-Sync-Konflikte
- **Mitigation**: Robuste Konfliktauflösung, User Guidance

**Risiko**: API-Breaking Changes
- **Mitigation**: Strikte Versionierung, Deprecation Policy

### 10.2 Business Risiken
**Risiko**: Langsame User Adoption
- **Mitigation**: Schrittweise Einführung, Training

**Risiko**: Widerstand gegen Veränderung
- **Mitigation**: Change Management, Quick Wins

### 10.3 Sicherheitsrisiken
**Risiko**: Datenlecks
- **Mitigation**: Verschlüsselung, Access Controls, Auditing

**Risiko**: API-Missbrauch
- **Mitigation**: Rate Limiting, API Keys, Monitoring

---

## 11. Anhänge

### 11.1 Glossar
- **API**: Application Programming Interface
- **PWA**: Progressive Web App
- **REST**: Representational State Transfer
- **tRPC**: TypeScript Remote Procedure Call
- **Edge Computing**: Dezentrale Datenverarbeitung
- **Service Worker**: Browser-Technologie für Offline-Funktionalität

### 11.2 Referenzen
- Bestehende Preiskalkulations-Prozesse
- Wettbewerberanalyse
- Technologie-Evaluierungen
- User Research Ergebnisse

### 11.3 Kontakte
- Product Owner
- Technical Lead
- UX/UI Designer
- QA Lead
- Stakeholder-Liste

---

## Zusammenfassung

Dieses PRD definiert einen modernen, API-first Ansatz für die Entwicklung eines Preiskalkulator-Tools. Der Fokus liegt auf einer robusten Backend-API, die als Fundament für verschiedene Client-Anwendungen dient, beginnend mit einer Mobile-First Progressive Web App. Die gewählte Architektur gewährleistet Skalierbarkeit, Wartbarkeit und Zukunftssicherheit des Systems.
